{
  "_args": [
    [
      {
        "raw": "async-sema@2.2.0",
        "scope": null,
        "escapedName": "async-sema",
        "name": "async-sema",
        "rawSpec": "2.2.0",
        "spec": "2.2.0",
        "type": "version"
      },
      "/home/pcj/dev/quinchuela-popotitos/node_modules/next"
    ]
  ],
  "_from": "async-sema@2.2.0",
  "_hasShrinkwrap": false,
  "_id": "async-sema@2.2.0",
  "_location": "/async-sema",
  "_nodeVersion": "10.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/async-sema_2.2.0_1550853956533_0.9973179729824613"
  },
  "_npmUser": {
    "name": "olliv",
    "email": "olli@zeit.co"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "async-sema@2.2.0",
    "scope": null,
    "escapedName": "async-sema",
    "name": "async-sema",
    "rawSpec": "2.2.0",
    "spec": "2.2.0",
    "type": "version"
  },
  "_requiredBy": [
    "/next"
  ],
  "_resolved": "https://registry.npmjs.org/async-sema/-/async-sema-2.2.0.tgz",
  "_shasum": "b0de2bb11a2560d369aca975d24650cc05304979",
  "_shrinkwrap": null,
  "_spec": "async-sema@2.2.0",
  "_where": "/home/pcj/dev/quinchuela-popotitos/node_modules/next",
  "author": {
    "name": "Olli Vanhoja"
  },
  "bugs": {
    "url": "https://github.com/zeit/async-sema/issues"
  },
  "dependencies": {},
  "description": "Semaphore using `async` and `await`",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-bI/JChXscebgVmAwTk+EQF4LIr4Hy6W5+B2AG1I9CmkfABmFEYyRrJGutfc816/Hd6LRzHFxpjGqZ/idwhJpRg==",
    "shasum": "b0de2bb11a2560d369aca975d24650cc05304979",
    "tarball": "https://registry.npmjs.org/async-sema/-/async-sema-2.2.0.tgz",
    "fileCount": 6,
    "unpackedSize": 12304,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJccCdFCRA9TVsSAnZWagAARq8QAJbnriVjD+iv7kg4gO1o\ne/qzD9RYGxcI5uK/tZlZ70q2DNiwZbIZlMTpdMDeZhfieAmurr1oKCXq5DFJ\nol3on+YZkThPBtomdIGijwUnGMIKYSZpuD6YqsLRQiyUora7qoIYG3KWDls+\n848g/HmeaNhw9akTiynAqhtbKVMFzsTqKMeEG0vSKTYAfX8b7I1yJtYZNicB\nS1WtXUxkAkISPz/4kxCSqHp0yBIJSVZs9NroJxYlCT3Op3mv1KzQFgQ+l8aQ\nPe+muVc4ecfLi3A/k5TQ2Vw0GLGn75dvWRS0fW8ghg28Pg33CLevKAMLPpZ7\ngWfi6bu/PAlpHITbeafh21smupiNKCtQZB9bicIZZdFv1Qh1Q7Yu/y/GC5ko\nBFBvIDUTahFUX5+/0H23/Wme30P76Ii3NjTQ1IKDYZSlpsnuQ4uUGyJjmZEi\np0mkeonQ2zcUqROQuPg/Zqn/mDnrIKfTXMNGfYVMAOdz0XrhwkGTcDv1Jq/n\nUSwePxB2RDGiZ8a+kdWKT2y5KYdZ3u5sl8HYGuL+BDxyhjtQXseQLDwMvv9c\ncrE8DoAvyQGNV2ZnfK4Ar0AxLXCqbXndCxCzAL2qpynwlMlNSC26XGPzTQtl\nU1YSf2JjvqPdYrtGwqbUIyp7Tv18iUu1djye2GsWCuvC0iYiAb8gbvkwfrtb\nN6zR\r\n=HdNe\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js",
    "rate-limit.js",
    "index.d.ts"
  ],
  "gitHead": "5d66867b5eb9fff6c7a8b97ec44391666605168f",
  "homepage": "https://github.com/zeit/async-sema",
  "keywords": [
    "semaphore",
    "async",
    "await"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "leo",
      "email": "leo@zeit.co"
    },
    {
      "name": "olliv",
      "email": "olli@zeit.co"
    }
  ],
  "name": "async-sema",
  "optionalDependencies": {},
  "readme": "# async-sema\n\nThis is a semaphore implementation for use with `async` and `await`. The implementation\nfollows the traditional definition of a semaphore rather than the definition of\nan asynchronous semaphore. Where as the latter one generally allows every\ndefined task to proceed immediately and synchronizes at the end, async-sema\nallows only a selected number of tasks to proceed at once while the rest will\nremain waiting.\n\nAsync-sema manages the semaphore count as a list of tokens instead of a single\nvariable containing the number of available resources. This enables an\ninteresting application of managing the actual resources with the semaphore\nobject itself. To make it practical the constructor for Sema includes an option\nfor providing an init function for the semaphore tokens. Use of a custom token\ninitializer is demonstrated in `example1.js`.\n\n## Usage\n\nFirstly, add the package to your project's `dependencies`:\n\n```bash\nnpm install --save async-sema\n```\n\nThen start using it like shown [here](./examples).\n\n## Example\nSee [/examples](./examples) for more use cases.\n\n```js\nconst Sema = require('async-sema');\nconst s = new Sema(\n  4, // Allow 4 concurrent async calls\n  {\n    capacity: 100 // Prealloc space for 100 tokens\n  }\n);\n\nasync function fetchData(x) {\n  await s.acquire()\n  try {\n    console.log(s.nrWaiting() + ' calls to fetch are waiting')\n    // ... do some async stuff with x\n  } finally {\n    s.release();\n  }\n}\n\nconst data = await Promise.all(array.map(fetchData));\n```\n\nThe package also offers a simple rate limiter utilizing the semaphore\nimplementation.\n\n```js\nconst RateLimit = require('async-sema/rate-limit');\n\nasync function f() {\n  const lim = RateLimit(5); // rps\n\n  for (let i = 0; i < n; i++) {\n    await lim();\n    // ... do something async\n  }\n}\n```\n\n## API\n\n### Constructor(nr, { initFn, pauseFn, resumeFn, capacity })\n\n- `nr` The maximum number of callers allowed to acquire the semaphore\n  concurrently.\n- `initFn` Function that is used to initialize the tokens used to manage\n  the semaphore. The default is `() => '1'`.\n- `pauseFn` An optional fuction that is called to opportunistically request\n  pausing the the incoming stream of data, instead of piling up waiting\n  promises and possibly running out of memory.\n  See [examples/pausing.js](./examples/pausing.js).\n- `resumeFn` An optional function that is called when there is room again\n  to accept new waiters on the semaphore. This function must be declared\n  if a `pauseFn` is declared.\n- `capacity` Sets the size of the preallocated waiting list inside the\n  semaphore. This is typically used by high performance where the developer\n  can make a rough estimate of the number of concurrent users of a semaphore.\n\n### async drain()\n\nDrains the semaphore and returns all the initialized tokens in an array.\nDraining is an ideal way to ensure there are no pending async tasks, for\nexample before a process will terminate.\n\n### nrWaiting()\n\nReturns the number of callers waiting on the semaphore, i.e. the number of\npending promises.\n\n### async acquire()\n\nAcquire a token from the semaphore, thus decrement the number of available\nexecution slots. If `initFn` is not used then the return value of the function\ncan be discarded.\n\n### release(token)\n\nRelease the semaphore, thus increment the number of free execution slots. If\n`initFn` is used then the `token` returned by `acquire()` should be given as\nan argument when calling this function.\n\n## Contributing\n\n1. [Fork](https://help.github.com/articles/fork-a-repo/) this repository to your own GitHub account and then [clone](https://help.github.com/articles/cloning-a-repository/) it to your local device\n2. Move into the directory of the clone: `cd async-sema`\n3. Link it to the global module directory of Node.js: `npm link`\n\nInside the project where you want to test your clone of the package, you can now either use `npm link async-sema` to link the clone to the local dependencies.\n\n## Author\n\nOlli Vanhoja ([@OVanhoja](https://twitter.com/OVanhoja)) - [â–²ZEIT](https://zeit.co)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zeit/async-sema.git"
  },
  "types": "index.d.ts",
  "version": "2.2.0"
}
