{
  "_args": [
    [
      {
        "raw": "react-markdown",
        "scope": null,
        "escapedName": "react-markdown",
        "name": "react-markdown",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/pcj/dev/quinchuela-popotitos"
    ]
  ],
  "_from": "react-markdown",
  "_hasShrinkwrap": false,
  "_id": "react-markdown@4.0.6",
  "_location": "/react-markdown",
  "_nodeVersion": "10.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-markdown_4.0.6_1546594345893_0.10613949884637974"
  },
  "_npmUser": {
    "name": "rexxars",
    "email": "espen@hovlandsdal.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-markdown",
    "scope": null,
    "escapedName": "react-markdown",
    "name": "react-markdown",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-markdown/-/react-markdown-4.0.6.tgz",
  "_shasum": "927d44421735cd90b7634bb221e9d7d8656e01e9",
  "_shrinkwrap": null,
  "_spec": "react-markdown",
  "_where": "/home/pcj/dev/quinchuela-popotitos",
  "author": {
    "name": "Espen Hovlandsdal",
    "email": "espen@hovlandsdal.com"
  },
  "bugs": {
    "url": "https://github.com/rexxars/react-markdown/issues"
  },
  "dependencies": {
    "html-to-react": "^1.3.4",
    "mdast-add-list-metadata": "1.0.1",
    "prop-types": "^15.6.1",
    "remark-parse": "^5.0.0",
    "unified": "^6.1.5",
    "unist-util-visit": "^1.3.0",
    "xtend": "^4.0.1"
  },
  "description": "Renders Markdown as React components",
  "devDependencies": {
    "@babel/cli": "^7.1.0",
    "@babel/core": "^7.1.0",
    "@babel/preset-env": "^7.1.0",
    "@babel/preset-react": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-jest": "^23.6.0",
    "babel-loader": "^8.0.2",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.20",
    "eslint": "^5.6.0",
    "eslint-config-prettier": "^3.1.0",
    "eslint-config-sanity": "^4.0.2",
    "eslint-plugin-react": "^7.7.0",
    "gh-pages-deploy": "^0.5.0",
    "jest": "^23.6.0",
    "prettier": "^1.15.3",
    "react": "^16.6.3",
    "react-addons-test-utils": "^15.6.2",
    "react-dom": "^16.6.3",
    "react-test-renderer": "^16.6.3",
    "remark-breaks": "^1.0.2",
    "remark-shortcodes": "^0.2.1",
    "rimraf": "^2.6.2",
    "uglify-js": "^3.4.5",
    "webpack": "^4.26.1",
    "webpack-bundle-analyzer": "^3.0.2",
    "webpack-cli": "^3.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-E1d/q+OBk5eumId42oYqVrJRB/+whrZdk+YHqUBCCNeWxqeV+Qzt+yLTsft9+4HRDj89Od7eAbUPQBYq8ZwShQ==",
    "shasum": "927d44421735cd90b7634bb221e9d7d8656e01e9",
    "tarball": "https://registry.npmjs.org/react-markdown/-/react-markdown-4.0.6.tgz",
    "fileCount": 21,
    "unpackedSize": 115716,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLygqCRA9TVsSAnZWagAAVlgQAJw2dYVNsll+YR4/kdeq\n8sRwiahJhjc9eGVe/NcqLNn31e444SxkCbnYZYtrejQvnfXUdqwAKqEDbcTL\npXPE6vHU6eSf3TBJaiK/qZ2KThtNBAZXPbq6nrGwByyCyfqeLRJ9QC981Inu\n856eibSu+a3jSsJ/idJ+THa8zjmvDldQUIyEIxVovAxR9lnpLNDdSa9nW1Ec\nj5M7hKPuovdaoqgwKSQT55glBTSRic3nZCCxSGcL00saV8MFSv2mt5w/Gi6K\npB4pNtF/aNc3anPNt5QvvpPAL8VTkLazrmsW3dYr80cb7OQ59yP4X/1r32wY\n1zqhltkA+iQy6tFG4Zu7hGq1L1UUDeLnlXVmGLGXF3MgjjlJp2F8XiA3SAkA\nd1plQiE5SHxiGIRuYYWUN3bUTzIM+td0DCSSbtS6FZGRWspslyVe8VHnfWck\nPoapOqj7ruGS7iv+ngUv7fAEsvELUwwXbgPZ3lWEpWuqHmemvWJVt98y/NdG\nbgrGlVOWnpjJb+g4jazqafuzkmXSw076kCvWf+FvQP/U6iXe9iVHm6K0PLkT\nKmikyQmY3/qE/NX/WRpINsnhzbFUFG+rTV8nhMKIzTJE7dXLWQkMVDQP2Z5I\nkO3dURZAbqni6oX3L7ZXETOxFCeZisB6U55OggCHmHN2PaYHrGoE2Md6s644\ns0q2\r\n=5rE3\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gh-pages-deploy": {
    "noprompt": true,
    "prep": [
      "build"
    ],
    "staticpath": "demo/dist"
  },
  "gitHead": "c86ebd4d1d706e09fc7d4fc398dc6a0b136cdc6f",
  "homepage": "https://github.com/rexxars/react-markdown#readme",
  "jest": {
    "verbose": true,
    "testEnvironment": "node",
    "coverageDirectory": "coverage",
    "collectCoverageFrom": [
      "src/**.js"
    ]
  },
  "keywords": [
    "markdown",
    "react",
    "react-component"
  ],
  "license": "MIT",
  "main": "lib/react-markdown.js",
  "maintainers": [
    {
      "name": "rexxars",
      "email": "rexxars@gmail.com"
    }
  ],
  "name": "react-markdown",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0.0 || ^16.0.0"
  },
  "readme": "# react-markdown\n\nRenders Markdown as pure React components.\n\n[![npm version](https://img.shields.io/npm/v/react-markdown.svg?style=flat-square)](http://browsenpm.org/package/react-markdown)[![Build Status](https://img.shields.io/travis/rexxars/react-markdown/master.svg?style=flat-square)](https://travis-ci.org/rexxars/react-markdown)\n\nDemo available at https://rexxars.github.io/react-markdown/\n\n---\n\nreact-markdown is proudly sponsored by\n\n<a href=\"https://www.sanity.io/?utm_source=GitHub&utm_campaign=react-markdown\" rel=\"nofollow\" target=\"_blank\">\n  <img src=\"https://www.sanity.io/static/images/logo_red.svg?v=2\" width=\"300\"><br />\n  Sanity: The Headless CMS Construction Kit\n</a>\n\n---\n\n## Installing\n\n```\nnpm install --save react-markdown\n```\n\n## Basic usage\n\n```js\nconst React = require('react')\nconst ReactDOM = require('react-dom')\nconst ReactMarkdown = require('react-markdown')\n\nconst input = '# This is a header\\n\\nAnd this is a paragraph'\n\nReactDOM.render(\n  <ReactMarkdown source={input} />,\n  document.getElementById('container')\n)\n```\n\n## Upgrading to 4.0\n\nShould be straightforward. You might need to alter you code slightly if you:\n- Are using `allowedTypes` (add `text` to the list)\n- Rely on there being a container `<div>` without a class name around your rendered markdown\n- Have implemented a custom `text` renderer\n\nSee [CHANGELOG](CHANGELOG.md) for more details. \n\n## Notes\n\nIf you don't need to render HTML, this component does not use `dangerouslySetInnerHTML` at all -\nthis is a Good Thingâ„¢.\n\n## Options\n\n* `source` or `children` - _string_ The Markdown source to parse (**required**)\n* `className` - _string_ Class name of the container element. If none is passed, a container will not be rendered.\n* `escapeHtml` - _boolean_ Setting to `false` will cause HTML to be rendered (see notes below about proper HTML support). Be aware that setting this to `false` might cause security issues if the\n  input is user-generated. Use at your own risk. (default: `true`).\n* `skipHtml` - _boolean_ Setting to `true` will skip inlined and blocks of HTML (default: `false`).\n* `sourcePos` - _boolean_ Setting to `true` will add `data-sourcepos` attributes to all elements,\n  indicating where in the markdown source they were rendered from (default: `false`).\n* `rawSourcePos` - _boolean_ Setting to `true` will pass a `sourcePosition` property to all renderers with structured source position information (default: `false`).\n* `includeNodeIndex` - _boolean_ Setting to `true` will pass `index` and `parentChildCount` props to all renderers (default: `false`).\n* `allowedTypes` - _array_ Defines which types of nodes should be allowed (rendered). (default: all\n  types).\n* `disallowedTypes` - _array_ Defines which types of nodes should be disallowed (not rendered).\n  (default: none).\n* `unwrapDisallowed` - _boolean_ Setting to `true` will try to extract/unwrap the children of\n  disallowed nodes. For instance, if disallowing `Strong`, the default behaviour is to simply skip\n  the text within the strong altogether, while the behaviour some might want is to simply have the\n  text returned without the strong wrapping it. (default: `false`)\n* `allowNode` - _function_ Function execute if in order to determine if the node should be allowed.\n  Ran prior to checking `allowedTypes`/`disallowedTypes`. Returning a truthy value will allow the\n  node to be included. Note that if this function returns `true` and the type is not in\n  `allowedTypes` (or specified as a `disallowedType`), it won't be included. The function will\n  receive three arguments argument (`node`, `index`, `parent`), where `node` contains different\n  properties depending on the node type.\n* `linkTarget` - _function|string_ Sets the default target attribute for links. If a function is\n  provided, it will be called with `url`, `text`, and `title` and should return a string\n  (e.g. `_blank` for a new tab). Default is `undefined` (no target attribute).\n* `transformLinkUri` - _function|null_ Function that gets called for each encountered link with a\n  single argument - `uri`. The returned value is used in place of the original. The default link URI\n  transformer acts as an XSS-filter, neutralizing things like `javascript:`, `vbscript:` and `file:`\n  protocols. If you specify a custom function, this default filter won't be called, but you can\n  access it as `require('react-markdown').uriTransformer`. If you want to disable the default\n  transformer, pass `null` to this option.\n* `transformImageUri` - _function|null_ Function that gets called for each encountered image with a\n  single argument - `uri`. The returned value is used in place of the original.\n* `renderers` - _object_ An object where the keys represent the node type and the value is a React\n  component. The object is merged with the default renderers. The props passed to the component\n  varies based on the type of node.\n* `plugins` - _array_ An array of unified/remark parser plugins. If you need to pass options to the plugin, pass an array with two elements, the first being the plugin and the second being the options - for instance: `{plugins: [[require('remark-shortcodes'), {your: 'options'}]]`. (default: `[]`) Note that [not all plugins can be used](https://github.com/rexxars/react-markdown/issues/188#issuecomment-404710893).\n\n## Parsing HTML\n\nIf you are in a trusted environment and want to parse and render HTML, you will want to use the `html-parser` plugin. For a default configuration, import `react-markdown/with-html` instead of the default:\n\n```js\nconst ReactMarkdown = require('react-markdown/with-html')\n\nconst markdown = `\nThis block of Markdown contains <a href=\"https://en.wikipedia.org/wiki/HTML\">HTML</a>, and will require the <code>html-parser</code> AST plugin to be loaded, in addition to setting the <code class=\"prop\">escapeHtml</code> property to false.\n`\n\n<ReactMarkdown\n  source={markdown}\n  escapeHtml={false}\n>\n```\n\nIf you want to specify options for the HTML parsing step, you can instead import the HTML parser plugin directly:\n\n```js\nconst ReactMarkdown = require('react-markdown')\nconst htmlParser = require('react-markdown/plugins/html-parser')\n\n// See https://github.com/aknuds1/html-to-react#with-custom-processing-instructions\n// for more info on the processing instructions\nconst parseHtml = htmlParser({\n  isValidNode: node => node.type !== 'script',\n  processingInstructions: [/* ... */]\n})\n\n<ReactMarkdown\n  source={markdown}\n  escapeHtml={false}\n  astPlugins={[parseHtml]}\n>\n```\n\n## Node types\n\nThe node types available are the following, and applies to both `renderers` and\n`allowedTypes`/`disallowedTypes`:\n\n* `root` - Root container element that contains the rendered markdown\n* `text` - Text rendered inside of other elements, such as paragraphs\n* `break` - Hard-break (`<br>`)\n* `paragraph` - Paragraph (`<p>`)\n* `emphasis` - Emphasis (`<em>`)\n* `strong` - Strong/bold (`<strong>`)\n* `thematicBreak` - Horizontal rule / thematic break (`<hr>`)\n* `blockquote` - Block quote (`<blockquote>`)\n* `delete` - Deleted/strike-through (`<del>`)\n* `link` - Link (`<a>`)\n* `image` - Image (`<img>`)\n* `linkReference` - Link (through a reference) (`<a>`)\n* `imageReference` - Image (through a reference) (`<img>`)\n* `table` - Table (`<table>`)\n* `tableHead` - Table head (`<thead>`)\n* `tableBody` - Table body (`<tbody>`)\n* `tableRow` - Table row (`<tr>`)\n* `tableCell` - Table cell (`<td>`/`<th>`)\n* `list` - List (`<ul>`/`<ol>`)\n* `listItem` - List item (`<li>`)\n* `definition` - Definition (not rendered by default)\n* `heading` - Heading (`<h1>`-`<h6>`)\n* `inlineCode` - Inline code (`<code>`)\n* `code` - Block of code (`<pre><code>`)\n* `html` - HTML node (Best-effort rendering)\n* `virtualHtml` - When not using the HTML parser plugin, a cheap and dirty approach to supporting simple HTML elements without a complete parser.\n* `parsedHtml` - When using the HTML parser plugin, HTML parsed to a React element.\n\nNote: Disallowing a node will also prevent the rendering of any children of that node, unless the\n`unwrapDisallowed` option is set to `true`. E.g., disallowing a paragraph will not render its\nchildren text nodes.\n\n## Developing\n\n```bash\ngit clone git@github.com:rexxars/react-markdown.git\ncd react-markdown\nnpm install\nnpm test\n```\n\n## License\n\nMIT Â© [Espen Hovlandsdal](https://espen.codes/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/rexxars/react-markdown.git"
  },
  "scripts": {
    "analyze": "npm run clean && npm run compile && NODE_ENV=production ANALYZE_BUNDLE=1 webpack -p",
    "build": "npm run clean && npm run compile && NODE_ENV=production webpack -p && npm run build:demo",
    "build:demo": "NODE_ENV=production webpack -p --config webpack.config.demo.js",
    "clean": "rimraf lib/",
    "compile": "babel --copy-files -d lib/ src/",
    "deploy": "gh-pages-deploy",
    "postbuild": "echo 'Ensuring ES5 compatibility...' && uglifyjs umd/react-markdown.js > /dev/null && echo 'Yep!'",
    "posttest": "eslint .",
    "prepublishOnly": "npm run qa",
    "qa": "npm test && npm run build",
    "test": "jest --coverage",
    "watch": "webpack --watch",
    "watch:demo": "webpack --watch --config webpack.config.demo.js"
  },
  "unpkg": "umd/react-markdown.js",
  "version": "4.0.6"
}
